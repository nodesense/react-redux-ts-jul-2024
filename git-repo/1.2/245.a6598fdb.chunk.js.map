{"version":3,"file":"static/js/245.a6598fdb.chunk.js","mappings":"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","sources":["app/cart/models/CartItemModel.ts","app/cart/components/CartItem.tsx","app/cart/components/CartList.tsx","app/cart/pages/Cart.tsx"],"sourcesContent":["export class CartItemModel {\r\n    constructor(public id:number,\r\n                public name: string, \r\n                public qty: number,\r\n                public price: number) {}\r\n    \r\n}","import React, {memo} from 'react';\r\nimport { CartItemModel } from '../models/CartItemModel';\r\n\r\ninterface Props {\r\n    item: CartItemModel;\r\n    dispatch: any;\r\n    updateItemInCart: any;\r\n}\r\n\r\nconst CartItem: React.FC<Props> = (props) => {\r\n    console.log(\"CartItem render \", props.item)\r\n\r\n    // destructruing\r\n    // const item = props.item\r\n    const {item, dispatch, updateItemInCart} = props;\r\n    return (\r\n        <tr>\r\n            <td>{item.name}</td>\r\n            <td>{item.price}</td>\r\n            <td>{item.qty}</td>\r\n            <td>{item.price * item.qty}</td>\r\n            <td> <button onClick={ () => updateItemInCart(item.id, item.qty + 1)}> +1 </button> </td>\r\n            <td> <button onClick={ () => dispatch({type:'REMOVE_ITEM', id:item.id})  }> X </button> </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default memo(CartItem);","import React, {memo} from 'react';\r\nimport { CartItemModel } from '../models/CartItemModel';\r\nimport CartItem from './CartItem';\r\n\r\ninterface Props {\r\n    items: CartItemModel[],\r\n    dispatch: any; //dipatch is a callback function passed from cart to cart list\r\n\r\n    updateItemInCart: any;\r\n}\r\n\r\n//destructring in function declaration\r\nconst CartList: React.FC<Props> = ( {items, dispatch, updateItemInCart} )=>{\r\n    //const items = props.items\r\n    console.log(\"CartList render\");\r\n    return (\r\n        <table>\r\n            <tr>\r\n                <td>Name</td>\r\n                <td>Price</td>\r\n                <td>Qty</td>\r\n                <td>Amount</td>\r\n                <td>Update</td>\r\n                <td>Delete</td>\r\n            </tr>\r\n            <tbody>\r\n                {\r\n                    items.map (item => (<CartItem item={item} \r\n                                         key={item.id}\r\n                                         updateItemInCart = {updateItemInCart}\r\n                                         dispatch={dispatch} />))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default memo(CartList);","import React, {useReducer, useState, useCallback} from 'react';\r\nimport { CartItemModel } from '../models/CartItemModel';\r\nimport { CartListModel } from '../models/CartListModel';\r\nimport CartList from '../components/CartList';\r\nimport { LanguageContext } from '../../contexts/Language';\r\n\r\n// useState for simple get/set\r\n// useReducer for complex logic\r\n\r\ninterface CartAction {\r\n    type: string;\r\n    item?: CartItemModel; // ? represent optional\r\n    id?: number;\r\n    qty?: number;\r\n}\r\n\r\n//Type is an alias\r\n// interface is a contract\r\n\r\ntype AddItem = { type: 'ADD_ITEM'; item: CartItemModel};\r\ntype RemoveItem = { type: 'REMOVE_ITEM', id: number };\r\ntype UpdateItem = {type: 'UPDATE_ITEM', id: number, qty: number}\r\ntype EmptyCart = {type: 'EMPTY_CART'}\r\n// | union type\r\ntype CartActions = AddItem | RemoveItem | UpdateItem | EmptyCart;\r\n\r\n\r\nconst INITIAL_STATE: CartListModel = {\r\n    items: [ \r\n        new CartItemModel(1, \"test\", 1, 100)\r\n    ],\r\n    amount: 0,\r\n    totalItems: 0\r\n}\r\n//TODO\r\nconst calculate = (items: any[]) => {\r\n    let amount = 0;\r\n    let totalItems = 0;\r\n    for (let item of items) {\r\n        amount += item.price * item.qty\r\n        totalItems += item.qty\r\n    }\r\n\r\n    return {\r\n            amount, // amount: amount\r\n            totalItems // totalItems: totalItems\r\n    } \r\n    \r\n}\r\n\r\nfunction cartReducer(state: CartListModel, action: CartActions): CartListModel {\r\n    console.log(\"cartReducer called \", state, action)\r\n\r\n    switch(action.type) {\r\n        case \"ADD_ITEM\": {\r\n            const items: CartItemModel []  = [...state.items, action.item]\r\n\r\n            const {amount, totalItems} = calculate(items)\r\n            return {items, amount, totalItems}\r\n        }\r\n\r\n        case \"REMOVE_ITEM\": {\r\n            const items = state.items.filter (item => item.id != action.id)\r\n            return {items, ...calculate(items)}\r\n        }\r\n\r\n        // case \"UPDATE_ITEM\": {\r\n        //     // FIXME\r\n        //     return {items: [], amount: 0, totalItems: 0}\r\n        // }\r\n\r\n        //TODO: RESET cart\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\nfunction addItem() {\r\n    const id = Math.ceil(Math.random() * 100000)\r\n    return new CartItemModel (\r\n        id, \r\n        `Generated ${id}`,\r\n        1,\r\n        Math.ceil(Math.random() * 100)\r\n    )\r\n}\r\n\r\nconst Cart = () => {\r\n    console.log(\"Cart Render\")\r\n    const [state, dispatch] = useReducer(cartReducer, INITIAL_STATE)\r\n\r\n    const [flag, setFlag] = useState(true)\r\n\r\n    const addItemToCart = () => {\r\n        const item = addItem()\r\n        // dispatch will call reducer\r\n        dispatch({type: \"ADD_ITEM\", item})\r\n    }\r\n\r\n    // whenever cart is re-rendered, this fucntion is created\r\n    // new reference of updateItemInCart shall be passed to cart list and cart item\r\n    // const updateItemInCart = (id: number, qty: number) => {\r\n    //     console.log(\"updateItem in Cart called\", id, qty)\r\n    //     dispatch({type: \"UPDATE_ITEM\", id, qty}) \r\n    // }\r\n\r\n     \r\n    // useCallback remember the first reference of the function between re-render\r\n    // only the first fucnction ref passed to child component as props\r\n     const updateItemInCart = useCallback ( (id: number, qty: number) => {\r\n        console.log(\"updateItem in Cart called\", id, qty)\r\n        dispatch({type: \"UPDATE_ITEM\", id, qty}) \r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Cart</h2>\r\n            \r\n            <button onClick={ () => setFlag(!flag)}>Flag</button>\r\n\r\n            <button onClick= { () => addItemToCart()}>\r\n                Add Item\r\n            </button>\r\n            <CartList items={state.items} dispatch={dispatch} \r\n                                          updateItemInCart={updateItemInCart} />\r\n        \r\n            {/* consuming context value in react component */}\r\n            <LanguageContext.Consumer>\r\n                {\r\n                    (lang) => (\r\n                        <button >  {lang.checkout} </button>\r\n                    )\r\n                    \r\n                }\r\n            </LanguageContext.Consumer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;"],"names":["CartItemModel","constructor","id","name","qty","price","CartItem","props","console","log","item","dispatch","updateItemInCart","_jsxs","children","_jsx","onClick","type","memo","CartList","_ref","items","map","INITIAL_STATE","amount","totalItems","calculate","cartReducer","state","action","filter","Cart","useReducer","flag","setFlag","useState","addItemToCart","Math","ceil","random","concat","addItem","useCallback","LanguageContext","Consumer","lang","checkout"],"sourceRoot":""}